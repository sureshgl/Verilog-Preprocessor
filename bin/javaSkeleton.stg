javaskel(classname,rulename,rulenameclass,rulebody)::=<<
package com.proteus.struct.verilog.gen.struct;


import lombok.Data;
import lombok.EqualsAndHashCode;

import com.proteus.parser.gen.VerilogParser.<rulenameclass>Context;
import com.proteus.struct.verilog.AbstractVerilogNode;
import com.proteus.struct.verilog.VerilogNode;


/*
RULE SPEC: As it appears in the grammar file
<rulebody>
*/
@Data
@EqualsAndHashCode(callSuper=true)
public class <classname> extends AbstractVerilogNode implements VerilogNode {

	public <classname>(<rulenameclass>Context ctx){
		super(ctx);
	}
	
	@Override
	public String toVerilogOutput() {
		//TODO implement this from RULE SPEC 
		StringBuilder sb = new StringBuilder();
		return sb.toString();
	}	

}  
>>

javaskel2(classname,rulealtname,rulealtnameClass,rulealttext,superclass,rulebody)::=<<
package com.proteus.struct.verilog.gen.struct;


import lombok.Data;
import lombok.EqualsAndHashCode;

import com.proteus.parser.gen.VerilogParser.<rulealtnameClass>Context;


/*
RULE SPEC: As it appears in the grammar file
Alternative Rule
*****************
<rulealttext>
************************************************************************
Parent Rule
***********
<rulebody>
************************************************************************
*/
@Data
@EqualsAndHashCode(callSuper=true)
public class <classname> extends <superclass> {

	public <classname>(<rulealtnameClass>Context ctx){
		super(ctx);
	}

	@Override
	public String toVerilogOutput() {
		//TODO implement this from RULE SPEC 
		StringBuilder sb = new StringBuilder();
		return sb.toString();
	}	

}
>>


visitor( rules)::=<<
package com.proteus.struct.verilog.gen.visitor;

import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.RuleNode;
import org.antlr.v4.runtime.tree.TerminalNode;

import com.proteus.parser.gen.VerilogParser.*;
import com.proteus.parser.gen.*;
import com.proteus.struct.verilog.*;

public class VerilogNodeVisitor implements VerilogVisitor\<VerilogNode\> {

	@Override
	public VerilogNode visit(ParseTree arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public VerilogNode visitChildren(RuleNode arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public VerilogNode visitErrorNode(ErrorNode arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public VerilogNode visitTerminal(TerminalNode arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	<rules:{rule|
@Override
public VerilogNode visit<rule.rulenameclass>(<rule.rulenameclass>Context ctx){
	return <rule.classname>.getVerilogNodeFromContext(ctx);
\}	};separator="\n\n">
	
}
>>

listener( rules)::=<<
package com.proteus.parser.verilog.top;


import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.misc.NotNull;
import org.antlr.v4.runtime.tree.ErrorNode;
import org.antlr.v4.runtime.tree.TerminalNode;

import com.proteus.parser.gen.VerilogParser.*;
import com.proteus.parser.gen.*;


public class CustomListener extends VerilogBaseListener {

	public static Set\<String> list = new LinkedHashSet\<String>();

	<rules:{rule|
@Override
public void enter<rule.rulenameclass>(<rule.rulenameclass>Context ctx){
	list.add("<rule.rulename>");
\}	};separator="\n\n">
	
}
>>


visitorskel(classname,rulename,ruletext)::=<<
package com.proteus.struct.verilog.gen.visitor;
 
import org.antlr.v4.runtime.misc.NotNull;

import com.proteus.parser.gen.VerilogBaseVisitor;
import com.proteus.parser.gen.VerilogParser;
import com.proteus.parser.verilog.components.VerilogNode;
 
/* 
RULE SPEC: As it appears in the grammar file
<ruletext>
*/ 
 
public class <classname>Visitor extends VerilogBaseVisitor\<VerilogNode\> {
	
	
	@Override
	public VerilogNode enter<rulename>(@NotNull VerilogParser.<rulename>Context ctx) {
		//TODO
		
	}
}

>>
